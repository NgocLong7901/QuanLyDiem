/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.PointDAOImpl;
import DAO.StudentDAOImpl;
import DAO.StudentPointDAOImpl;
import DAO.SubjectDAOImpl;
import DAO.TablePointDAOImpl;
import Interfaces.PointDAO;
import Interfaces.StudentDAO;
import Interfaces.StudentPointDAO;
import Interfaces.SubjectDAO;
import Interfaces.TablePointDAO;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import ql_diem.Models.Point;
import ql_diem.Models.Student;

/**
 *
 * @author MSIISM
 */
public class StudentPointJFrame extends javax.swing.JFrame {

    /**
     * Creates new form StudentPointJFrame
     */
    ArrayList<Point> points;
    Point point;
    PointDAO pointDAO;
    DefaultTableModel model;
    TablePointDAO tp;
    StudentDAO studentDAO;
    StudentPointDAO spDAO;
    private TableRowSorter<TableModel> rowSorter = null;

    public StudentPointJFrame(int studentId) {
        initComponents();
        setTitle("Điểm sinh viên");
        this.setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setTable();
        tp = new TablePointDAOImpl();
        ArrayList<String> termYears = tp.getTermYear(studentId);
        for (String termYear : termYears) {
            model.addRow(new Object[]{termYear.toUpperCase()});
            showData(studentId, termYear);
            model.addRow(new Object[]{"Điểm trung bình học kỳ hệ 10: " + finalTerm10(studentId, termYear)});
            model.addRow(new Object[]{"Điểm trung bình học kỳ hệ 4: " + finalTerm4(studentId, termYear)});
            model.addRow(new Object[]{"Điểm trung bình tích lũy(10): " + pointHave10(studentId, termYear)});
            model.addRow(new Object[]{"Điểm trung bình tích lũy(4): " + pointHave4(studentId, termYear)});
            model.addRow(new Object[]{"Số tín chỉ đạt: " + creditPass(studentId, termYear)});
            model.addRow(new Object[]{"Số tín tích lũy: " + creditHave(studentId, termYear)});
            model.addRow(new Object[]{"Phân loại ĐTB HK: " + typeTerm(studentId, termYear)});
            model.addRow(new Object[]{});
        }

        studentDAO = new StudentDAOImpl();
        Student s = studentDAO.getStudentById(studentId);
        setInfo(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void setTable() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        // centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jtbStudentPoint.setDefaultRenderer(String.class, centerRenderer);
        model = (DefaultTableModel) jtbStudentPoint.getModel();
        JTableHeader header = jtbStudentPoint.getTableHeader();
        // jtbStudentPoint.setShowHorizontalLines(false);
        jtbStudentPoint.setShowVerticalLines(false);
        header.setFont(new Font("Dialog", Font.BOLD, 18));
        header.setPreferredSize(new Dimension(100, 50));
        model.setColumnIdentifiers(new Object[]{
            "STT", "Mã môn học", "Tên môn học", "Lớp môn học", "Số tín chỉ", "Điểm QT", "Điểm KT", "TK(10)",
            "TK(Chữ)", "TK(4.0)"
        });
        jtbStudentPoint.getColumnModel().getColumn(0).setPreferredWidth(230);
        jtbStudentPoint.getColumnModel().getColumn(1).setPreferredWidth(50);
        jtbStudentPoint.getColumnModel().getColumn(2).setPreferredWidth(300);
        jtbStudentPoint.getColumnModel().getColumn(3).setPreferredWidth(5);
        jtbStudentPoint.getColumnModel().getColumn(4).setPreferredWidth(30);
        jtbStudentPoint.getColumnModel().getColumn(5).setPreferredWidth(5);
        jtbStudentPoint.getColumnModel().getColumn(6).setPreferredWidth(5);
        jtbStudentPoint.getColumnModel().getColumn(7).setPreferredWidth(5);
        jtbStudentPoint.getColumnModel().getColumn(8).setPreferredWidth(5);
        setBtnColor(btnExit);
    }

    private void setBtnColor(JButton btn) {
        btn.setBackground(Color.WHITE);
        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                btn.setBackground(Color.GREEN);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btn.setBackground(Color.WHITE);
            }

        });

    }
    private void showData(int studentId, String termYear) {

        StudentPointDAO studentPointDAO = new StudentPointDAOImpl();
        SubjectDAO subjectDAO = new SubjectDAOImpl();
        TablePointDAO tablePointDAO = new TablePointDAOImpl();

        pointDAO = new PointDAOImpl();

        points = pointDAO.getPointsByStudentId(studentId, termYear);

        // DefaultTableModel model = (DefaultTableModel) jtbStudent.getModel();
        Object[] rows = new Object[10];

        for (int i = 0; i < points.size(); i++) {

            int tbPointId = points.get(i).getTablePointId();
            int subjectId = studentPointDAO.getSubjectIdByTPId(tbPointId);
            rows[0] = i + 1;
            rows[1] = studentPointDAO.getSubjectIdByTPId(tbPointId);
            rows[2] = subjectDAO.getSubjectNameById(subjectId);
            rows[3] = tablePointDAO.getClassNamebyTpId(tbPointId);
            rows[4] = subjectDAO.getCreditBySubjectId(subjectId);
            rows[5] = points.get(i).getProcessPoint();
            rows[6] = points.get(i).getTestPoint();
            rows[7] = finalPoint10(points.get(i).getProcessPoint(), points.get(i).getTestPoint());
            rows[8] = finalPointLetter(points.get(i).getProcessPoint(), points.get(i).getTestPoint());
            rows[9] = finalPoint4(points.get(i).getProcessPoint(), points.get(i).getTestPoint());

            model.addRow(rows);
        }

    }

    private ArrayList<String> getAllTermYear(ArrayList<Point> points) {
        ArrayList<String> termYears = new ArrayList<>();
        TablePointDAO tablePointDAO = new TablePointDAOImpl();
        for (Point point : points) {
            int tbPointId = point.getTablePointId();
            String termYear = tablePointDAO.getTermYearByTPId(tbPointId);
            if (termYears.contains(termYear) == false) {
                termYears.add(termYear);
                // Collections.sort(hks);
            }
        }
        return termYears;
    }

    private float finalPoint10(double processPoint, double testPoint) {
        float finalPoint = (float) (processPoint * 0.3 + testPoint * 0.7);
        float tk1 = (float) Math.round(finalPoint * 10) / 10;
        return tk1;
    }

    private String finalPointLetter(double processPoint, double testPoint) {
        String finalLetter;
        double finalPoint10 = finalPoint10(processPoint, testPoint);
        if (finalPoint10 >= 8.5) {
            finalLetter = "A";
        } else if (finalPoint10 >= 8) {
            finalLetter = "B+";
        } else if (finalPoint10 >= 7) {
            finalLetter = "B";
        } else if (finalPoint10 >= 6.5) {
            finalLetter = "C+";
        } else if (finalPoint10 >= 5.5) {
            finalLetter = "C";
        } else if (finalPoint10 >= 5) {
            finalLetter = "D+";
        } else if (finalPoint10 >= 4) {
            finalLetter = "D";
        } else {
            finalLetter = "F";
        }
        return finalLetter;
    }

    private double finalPoint4(double processPoint, double testPoint) {
        double final4 = 0;
        switch (finalPointLetter(processPoint, testPoint)) {
            case "A":
                final4 = 4;
                break;
            case "B+":
                final4 = 3.5;
                break;
            case "B":
                final4 = 3;
                break;
            case "C+":
                final4 = 2.5;
                break;
            case "C":
                final4 = 2;
                break;
            case "D+":
                final4 = 1.5;
                break;
            case "D":
                final4 = 1;
                break;
            case "F":
                final4 = 0;
                break;

        }
        return final4;
    }

    public int creditOfTerm(int studentId, String termYear) {
        int credit = 0;
        ArrayList<Point> points = new ArrayList<>();
        points = pointDAO.getPointsByStudentId(studentId, termYear);
        for (Point point : points) {
            credit += tp.getCreditByTPId(point.getTablePointId());
        }
        return credit;
    }

    private int creditPass(int studentId, String termYear) {
        int creditPass = 0;
        ArrayList<Point> points = new ArrayList<>();
        points = pointDAO.getPointsByStudentId(studentId, termYear);
        for (Point point : points) {
            if (finalPoint4(point.getProcessPoint(), point.getTestPoint()) != 0) {
                creditPass += tp.getCreditByTPId(point.getTablePointId());
            }
        }
        return creditPass;
    }

    private int creditHave(int studentId, String termYear) {
        int creditHave = 0;
        ArrayList<String> termYears = tp.getTermYear(studentId);
        Collections.sort(termYears);
        for (String term : termYears) {
            creditHave += creditPass(studentId, term);
            if (term.equals(termYear)) {
                break;
            }
        }
        return creditHave;
    }

    private double finalTerm10(int studentId, String termYear) {
        ArrayList<Point> points = pointDAO.getPointsByStudentId(studentId, termYear);
        double tb = 0;
        double temp = 0;
        for (Point point : points) {
            temp += finalPoint10(point.getProcessPoint(), point.getTestPoint()) * tp.getCreditByTPId(point.getTablePointId());
        }
        tb = temp / creditOfTerm(studentId, termYear);
        tb = (double) Math.round(tb * 100) / 100;
        return tb;
    }

    private double finalTerm4(int studentId, String termYear) {
        ArrayList<Point> points = pointDAO.getPointsByStudentId(studentId, termYear);
        double tb = 0;
        double temp = 0;
        for (Point point : points) {
            temp += finalPoint4(point.getProcessPoint(), point.getTestPoint()) * tp.getCreditByTPId(point.getTablePointId());

        }
        tb = temp / (creditOfTerm(studentId, termYear));
        tb = (double) Math.round(tb * 100) / 100;
        return tb;
    }

    double pointHave10(int studentId, String termYear) {
        double tb = 0;
        ArrayList<String> termYears = tp.getTermYear(studentId);
        Collections.sort(termYears);
        double temp = 0;
        for (String term : termYears) {
            ArrayList<Point> points = pointDAO.getPointsByStudentId(studentId, term);
            for (Point point : points) {
                if (finalPoint10(point.getProcessPoint(), point.getTestPoint()) >= 4) {
                    temp += finalPoint10(point.getProcessPoint(), point.getTestPoint()) * tp.getCreditByTPId(point.getTablePointId());

                }
            }
            if (term.equals(termYear)) {
                break;
            }
        }
        tb = temp / creditHave(studentId, termYear);
        double tb1 = (double) (Math.round(tb * 100)) / 100;
        return tb1;
    }

    double pointHave4(int studentId, String termYear) {
        double tb = 0;
        double temp = 0;
        ArrayList<String> termYears = tp.getTermYear(studentId);
        Collections.sort(termYears);
        for (String term : termYears) {
            ArrayList<Point> points = pointDAO.getPointsByStudentId(studentId, term);
            for (Point point : points) {
                temp += finalPoint4(point.getProcessPoint(), point.getTestPoint()) * tp.getCreditByTPId(point.getTablePointId());

            }
            if (term.equals(termYear)) {
                break;
            }
        }
        tb = temp / creditHave(studentId, termYear);
        double tb1 = (double) (Math.round(tb * 100)) / 100;
        return tb1;
    }

    String typeTerm(int studentId, String termYear) {
        String rs = "";
        if (finalTerm4(studentId, termYear) >= 3.6) {
            rs = "Xuất sắc";
        } else if (finalTerm4(studentId, termYear) >= 3.2) {
            rs = "Giỏi";
        } else if (finalTerm4(studentId, termYear) >= 2.5) {
            rs = "Khá";
        } else {
            rs = "Trung bình";
        }
        return rs;
    }

    public void setInfo(Student s) {
        jtfStudentId.setText(s.getStudentId() + "");
        jtfStudentName.setText(s.getStudentName());
        jtfAddress.setText(s.getAddress());
        jtfClass.setText(s.getClassName());
        if (s.getGender()) {
            jtfGender.setText("Nam");

        } else {
            jtfGender.setText("Nữ");
        }
        jtfMajor.setText(s.getMajor());
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbStudentPoint = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jlbStudentId = new javax.swing.JLabel();
        jlbStudentName = new javax.swing.JLabel();
        jlbGender = new javax.swing.JLabel();
        jlbAddress = new javax.swing.JLabel();
        jlbClass = new javax.swing.JLabel();
        jlbMajor = new javax.swing.JLabel();
        jtfStudentId = new javax.swing.JTextField();
        jtfStudentName = new javax.swing.JTextField();
        jtfGender = new javax.swing.JTextField();
        jtfAddress = new javax.swing.JTextField();
        jtfClass = new javax.swing.JTextField();
        jtfMajor = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtbStudentPoint.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtbStudentPoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9"
            }
        ));
        jtbStudentPoint.setRowHeight(30);
        jScrollPane1.setViewportView(jtbStudentPoint);

        jPanel2.setBackground(new java.awt.Color(79, 58, 236));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 2, true));

        jlbStudentId.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbStudentId.setForeground(new java.awt.Color(255, 255, 255));
        jlbStudentId.setText("Mã sinh viên");

        jlbStudentName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbStudentName.setForeground(new java.awt.Color(255, 255, 255));
        jlbStudentName.setText("Họ tên");

        jlbGender.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbGender.setForeground(new java.awt.Color(255, 255, 255));
        jlbGender.setText("Giới tính");

        jlbAddress.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbAddress.setForeground(new java.awt.Color(255, 255, 255));
        jlbAddress.setText("Địa chỉ");

        jlbClass.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbClass.setForeground(new java.awt.Color(255, 255, 255));
        jlbClass.setText("Lớp");

        jlbMajor.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbMajor.setForeground(new java.awt.Color(255, 255, 255));
        jlbMajor.setText("Khoa");

        jtfStudentId.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfStudentId.setText("jTextField1");

        jtfStudentName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfStudentName.setText("jTextField2");

        jtfGender.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfGender.setText("jTextField3");

        jtfAddress.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfAddress.setText("jTextField4");

        jtfClass.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfClass.setText("jTextField5");

        jtfMajor.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jtfMajor.setText("jTextField6");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfClass, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfGender, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlbStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                        .addComponent(jtfStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(95, 95, 95))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfGender, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfClass, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlbMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/LOGO_DHXD (2).png"))); // NOI18N

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(210, 210, 210))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addComponent(btnExit)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/kisspng-academic-degree-bachelor-s-degree-master-s-degree-5ae4717212ae41.8260081915249206900765__1_-removebg-preview.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jLabel2)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentPointJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentPointJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentPointJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentPointJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlbAddress;
    private javax.swing.JLabel jlbClass;
    private javax.swing.JLabel jlbGender;
    private javax.swing.JLabel jlbMajor;
    private javax.swing.JLabel jlbStudentId;
    private javax.swing.JLabel jlbStudentName;
    private javax.swing.JTable jtbStudentPoint;
    private javax.swing.JTextField jtfAddress;
    private javax.swing.JTextField jtfClass;
    private javax.swing.JTextField jtfGender;
    private javax.swing.JTextField jtfMajor;
    private javax.swing.JTextField jtfStudentId;
    private javax.swing.JTextField jtfStudentName;
    // End of variables declaration//GEN-END:variables
}
